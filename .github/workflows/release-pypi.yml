name: Publish (PyPI)

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag (es. v0.2.0) usato per il check versione quando eseguito a mano"
        required: true
        default: "v0.2.0"

jobs:
  publish:
    # Consenti:
    # - Release normali (non prerelease)
    # - Esecuzione manuale con tag fornito negli inputs
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'release' && github.event.release.prerelease == false)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1   # niente fetch dei tag

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install build deps
        run: |
          python -m pip install --upgrade pip
          python -m pip install build twine tomli

      - name: Verify version matches tag
        env:
          EVENT_NAME: ${{ github.event_name }}
          RELEASE_TAG: ${{ github.event.release.tag_name }}
          INPUT_TAG: ${{ github.event.inputs.tag }}
        run: |
          set -euo pipefail

          # Determina il tag in base al tipo di evento (niente git describe)
          if [ "$EVENT_NAME" = "release" ]; then
            TAG="$RELEASE_TAG"
          else
            TAG="$INPUT_TAG"
          fi

          echo "Tag evento: $TAG"
          if [ -z "$TAG" ]; then
            echo "::error::Tag mancante. Su workflow_dispatch devi passare 'inputs.tag'."
            exit 1
          fi

          # Leggi la versione da pyproject.toml
          PYPROJECT_VERSION=$(python - <<'PY'
          import tomli
          with open("pyproject.toml", "rb") as f:
              print(tomli.load(f)["project"]["version"])
          PY
          )
          CLEAN_TAG="${TAG#v}"

          echo "pyproject version: $PYPROJECT_VERSION"
          echo "release tag      : $CLEAN_TAG"

          if [ "$PYPROJECT_VERSION" != "$CLEAN_TAG" ]; then
            echo "::error::Versione in pyproject.toml ($PYPROJECT_VERSION) diversa dal tag ($CLEAN_TAG)"
            exit 1
          fi

      - name: Build sdist+wheel
        run: python -m build

      - name: Twine check
        run: python -m twine check dist/*

      - name: Upload to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python -m twine upload --verbose dist/*
